{"version":3,"file":"alphabetical-scroll-bar.js","sources":["../../../projects/alphabetical-scroll-bar/src/lib/alphabetical-scroll-bar.service.ts","../../../projects/alphabetical-scroll-bar/src/lib/alphabetical-scroll-bar.component.ts","../../../projects/alphabetical-scroll-bar/src/lib/alphabetical-scroll-bar.module.ts","../../../projects/alphabetical-scroll-bar/src/public-api.ts","../../../projects/alphabetical-scroll-bar/src/alphabetical-scroll-bar.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlphabeticalScrollBarService {\n\n  constructor() { }\n}\n","import { BooleanInput, coerceBooleanProperty, coerceNumberProperty, NumberInput } from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'alphabetical-scroll-bar',\n  templateUrl: './alphabetical-scroll-bar.component.html',\n  styleUrls: ['./alphabetical-scroll-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlphabeticalScrollBarComponent implements AfterViewInit, DoCheck, OnDestroy {\n  constructor(private _cdr: ChangeDetectorRef) {}\n\n  @ViewChild('alphabetContainer', { static: true })\n  alphabetContainer: ElementRef;\n\n  get alphabet(): any {\n    return this._alphabet;\n  }\n  //A custom alphabet to be used instead of the default alphabet. Default is 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  @Input() set alphabet(value: any) {\n    if (typeof value === 'string') this._alphabet = [...value];\n    else if (Array.isArray(value) && value.every((it) => typeof it === 'string')) this._alphabet = value;\n    else throw new Error('alphabet must be a string or an array of strings');\n    this.checkVisibleLetters(true);\n    this.validLetters = this._alphabet;\n  }\n  private _alphabet: Array<string> = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n\n  get overflowDivider(): string | undefined | null {\n    return this._overflowDivider;\n  }\n  //A custom overflow divider. Can be undefined or null if you don't want to use one. Defaults to '·'\n  @Input() set overflowDivider(value: string | undefined | null) {\n    if (typeof value === 'string' || value === undefined || value === null) this._overflowDivider = value;\n    else throw new Error('overflowDivider must be a string');\n    this.checkVisibleLetters(true);\n  }\n  private _overflowDivider: string = '·';\n\n  get validLetters(): string[] {\n    return this._validLetters;\n  }\n  //Valid letters that are available for the user to select. default is all letters\n  @Input() set validLetters(value: string[]) {\n    this._validLetters = value;\n    this.checkVisibleLetters(true);\n  }\n  private _validLetters: Array<string> = this._alphabet;\n\n  get disableInvalidLetters(): BooleanInput {\n    return this._disableInvalidLetters;\n  }\n  //Whether or invalid letters should be disabled (greyed out and do not magnify)\n  @Input() set disableInvalidLetters(value: BooleanInput) {\n    this._disableInvalidLetters = coerceBooleanProperty(value);\n    this.checkVisibleLetters(true);\n  }\n  private _disableInvalidLetters = false;\n\n  get prioritizeHidingInvalidLetters(): BooleanInput {\n    return this._prioritizeHidingInvalidLetters;\n  }\n  //Whether or invalid letters should be disabled (greyed out and do not magnify)\n  @Input() set prioritizeHidingInvalidLetters(value: BooleanInput) {\n    this._prioritizeHidingInvalidLetters = coerceBooleanProperty(value);\n    this.checkVisibleLetters(true);\n  }\n  private _prioritizeHidingInvalidLetters = false;\n\n  get letterMagnification(): BooleanInput {\n    return this._letterMagnification;\n  }\n  //Whether or not letters should be magnified\n  @Input() set letterMagnification(value: BooleanInput) {\n    this._letterMagnification = coerceBooleanProperty(value);\n  }\n  private _letterMagnification = true;\n\n  get magnifyDividers(): BooleanInput {\n    return this._magnifyDividers;\n  }\n  //Whether or not overflow diveders should be magnified\n  @Input() set magnifyDividers(value: BooleanInput) {\n    this._magnifyDividers = coerceBooleanProperty(value);\n  }\n  private _magnifyDividers = false;\n\n  get magnificationMultiplier(): number {\n    return this._magnificationMultiplier;\n  }\n  //The maximum that the magnification multiplier can be. Default is 3\n  @Input() set magnificationMultiplier(value: number) {\n    this._magnificationMultiplier = value;\n    this.checkVisibleLetters(true);\n  }\n  private _magnificationMultiplier = 2;\n\n  get magnificationCurve(): Array<number> {\n    return this._magnificationCurve;\n  }\n  //Magnification curve accepts an array of numbers between 1 and 0 that represets the curve of magnification starting from magnificaiton multiplier to 1: defaults to [1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n  @Input() set magnificationCurve(value: Array<number>) {\n    if (Array.isArray(value) && value.every((it) => typeof it === 'number' && it >= 0 && it <= 1)) this._magnificationCurve = value;\n    else throw new Error('magnificationCurve must be an array of numbers between 0 and 1');\n  }\n\n  private _magnificationCurve = [1, 0.7, 0.5, 0.3, 0.1];\n\n  get exactX(): BooleanInput {\n    return this._exactX;\n  }\n  //If the scrolling for touch screens in the x direction should be lenient. Default is false\n  @Input() set exactX(value: BooleanInput) {\n    this._exactX = coerceBooleanProperty(value);\n  }\n  private _exactX = false;\n\n  get navigateOnHover(): BooleanInput {\n    return this._navigateOnHover;\n  }\n  //Whether or not letter change event is emitted on mouse hover. Default is false\n  @Input() set navigateOnHover(value: BooleanInput) {\n    this._navigateOnHover = coerceBooleanProperty(value);\n  }\n  private _navigateOnHover = false;\n\n  get letterSpacing(): number | string | null {\n    return this._letterSpacing;\n  }\n  //Percentage or number in pixels of how far apart the letters are. Defaults to 1.75%\n  @Input() set letterSpacing(value: number | string | null) {\n    if (typeof value === 'string') {\n      this._letterSpacing = this.stringToNumber(value);\n      if (value.includes('%')) {\n        this._letterSpacing = this._letterSpacing.toString() + '%';\n      }\n    } else {\n      this._letterSpacing = coerceNumberProperty(value);\n    }\n\n    this.checkVisibleLetters(true);\n  }\n  private _letterSpacing: number | string | null = '1%';\n\n  //Output event when a letter selected\n  @Output('letterChange') letterChange$ = new EventEmitter<string>();\n  //Emitted when scrollbar is activated or deactivated\n  @Output('isActive') isActive$ = new EventEmitter<boolean>();\n\n  private _lastEmittedActive = false;\n  private _isComponentActive = false;\n\n  private readonly _cancellationToken$: Subject<void> = new Subject();\n\n  get offsetSizeCheckInterval(): NumberInput {\n    return this._offsetSizeCheckInterval;\n  }\n  //This interval can be used for fast, regular size-checks\n  //Useful, if e.g. a splitter-component resizes the scroll-bar but not the window itself. Set in ms and defaults to 0 (disabled)\n  @Input() set offsetSizeCheckInterval(value: NumberInput) {\n    this._offsetSizeCheckIntervalSubscription?.unsubscribe();\n    this._offsetSizeCheckInterval = coerceNumberProperty(value);\n    this._offsetSizeCheckInterval &&\n      (this._offsetSizeCheckIntervalSubscription = interval(this._offsetSizeCheckInterval)\n        .pipe(takeUntil(this._cancellationToken$))\n        .subscribe(() => this.checkVisibleLetters()));\n  }\n  private _offsetSizeCheckInterval = 0;\n  private _offsetSizeCheckIntervalSubscription: Subscription;\n\n  ngAfterViewInit(): void {\n    fromEvent(window, 'resize')\n      .pipe(takeUntil(this._cancellationToken$))\n      .subscribe(() => this.checkVisibleLetters());\n  }\n  ngDoCheck(): void {\n    this.checkVisibleLetters();\n  }\n  ngOnDestroy() {\n    this._cancellationToken$.next();\n    this._cancellationToken$.complete();\n  }\n\n  checkVisibleLetters(force?: boolean): void {\n    let height = this.alphabetContainer.nativeElement.clientHeight;\n    if (!force && height === this._lastHeight) {\n      return;\n    }\n\n    this._lastHeight = height;\n\n    let newAlphabet = this.alphabet;\n    let letterSpacing = 0;\n    let letterSize = this.stringToNumber(getComputedStyle(this.alphabetContainer.nativeElement).getPropertyValue('font-size'));\n\n    if (this.letterMagnification) {\n      letterSize = letterSize * this.magnificationMultiplier;\n    }\n\n    //Calculate actual letter spacing\n    if (typeof this.letterSpacing === 'number') {\n      letterSpacing = this.letterSpacing;\n    } else if (typeof this.letterSpacing === 'string') {\n      letterSpacing = this.stringToNumber(this.letterSpacing);\n      if (this.letterSpacing.endsWith('%')) {\n        letterSpacing = height * (letterSpacing / 100);\n      }\n    }\n\n    letterSize = letterSize + letterSpacing;\n\n    //Remove invalid letters (if set and necessary)\n    if (this.prioritizeHidingInvalidLetters && !!this.validLetters && height / letterSize < newAlphabet.length) {\n      newAlphabet = this.validLetters;\n    }\n\n    //Check if there is enough free space for letters\n    this._lettersShortened = height / letterSize < newAlphabet.length;\n    if (this._lettersShortened) {\n      const numHiddenLetters = newAlphabet.length - Math.floor(height / letterSize);\n      if (numHiddenLetters === newAlphabet.length) newAlphabet = [];\n\n      //determine how many letters to hide\n      const hiddenHalves = this.getNumHiddenHalves(numHiddenLetters, newAlphabet.length) + 1;\n      // (this.magnifyDividers || numHiddenLetters > newAlphabet.length - 2 ? 1 : 0);\n\n      //split alphabet into two halves\n      let alphabet1 = newAlphabet.slice(0, Math.ceil(newAlphabet.length / 2));\n      let alphabet2 = newAlphabet.slice(Math.floor(newAlphabet.length / 2)).reverse();\n\n      for (let i = 0; i < hiddenHalves; i++) {\n        alphabet1 = alphabet1.filter((l, i) => i % 2 === 0);\n        alphabet2 = alphabet2.filter((l, i) => i % 2 === 0);\n      }\n\n      //insert dots between letters\n      alphabet1 = alphabet1.reduce((prev, curr, i) => {\n        if (i > 0) {\n          if (this.overflowDivider) prev.push(this.overflowDivider);\n        }\n        prev.push(curr);\n        return prev;\n      }, []);\n      alphabet2 = alphabet2.reduce((prev, curr, i) => {\n        if (i > 0) {\n          if (this.overflowDivider) prev.push(this.overflowDivider);\n        }\n        prev.push(curr);\n        return prev;\n      }, []);\n\n      if (this.alphabet.length % 2 === 0 && this.overflowDivider) alphabet1.push(this.overflowDivider);\n      newAlphabet = alphabet1.concat(alphabet2.reverse());\n    }\n\n    this._cdr.markForCheck();\n    this.visibleLetters = newAlphabet;\n  }\n  private _lastHeight: number;\n  visibleLetters: Array<string>;\n  //Flag for determining letter under pointer\n  private _lettersShortened = false;\n\n  getNumHiddenHalves(numHiddenLetters: number, total: number) {\n    if (numHiddenLetters > total / 2) {\n      return 1 + this.getNumHiddenHalves(numHiddenLetters % (total / 2), Math.ceil(total / 2));\n    }\n    return 0;\n  }\n\n  isValid(letter: string): boolean {\n    return this.validLetters?.includes(letter) !== false || letter === this.overflowDivider;\n  }\n\n  getLetterStyle(index: number) {\n    if (\n      (this.magIndex === undefined && this.magIndex === null) ||\n      (!this.magnifyDividers && this.visibleLetters[index] === this.overflowDivider) ||\n      (this.disableInvalidLetters && !this.isValid(this.visibleLetters[index]))\n    )\n      return {};\n    const lettersOnly = this.visibleLetters.filter((l) => l !== this.overflowDivider);\n\n    const mappedIndex = Math.round((index / this.visibleLetters.length) * lettersOnly.length);\n    const mappedMagIndex = Math.round((this.magIndex / this.visibleLetters.length) * lettersOnly.length);\n\n    let relativeIndex = this.magnifyDividers ? Math.abs(this.magIndex - index) : Math.abs(mappedMagIndex - mappedIndex);\n\n    const magnification =\n      relativeIndex < this.magnificationCurve.length - 1 ? this.magnificationCurve[relativeIndex] * (this.magnificationMultiplier - 1) + 1 : 1;\n    const style: any = {\n      transform: `scale(${magnification})`,\n      zIndex: this.magIndex === index ? 1 : 0,\n    };\n    return this._isComponentActive && this.letterMagnification ? style : {};\n  }\n\n  @HostListener('mousemove', ['$event', '$event.type'])\n  @HostListener('mouseenter', ['$event', '$event.type'])\n  @HostListener('touchmove', ['$event', '$event.type'])\n  @HostListener('touchstart', ['$event', '$event.type'])\n  @HostListener('click', ['$event', '$event.type'])\n  focusEvent(event: MouseEvent & TouchEvent, type?: string): void {\n    if (!this._lastEmittedActive) {\n      this.isActive$.emit((this._lastEmittedActive = true));\n    }\n\n    if (type == 'click') this._isComponentActive = false;\n    else this._isComponentActive = true;\n\n    this.setLetterFromCoordinates(event.touches?.[0].clientX ?? event.clientX, event.touches?.[0].clientY ?? event.clientY);\n\n    if (this._lastEmittedLetter !== this.letterSelected && (this.navigateOnHover || !type.includes('mouse'))) {\n      this.letterChange$.emit((this._lastEmittedLetter = this.letterSelected));\n    }\n  }\n  private _lastEmittedLetter: string;\n\n  @HostListener('mouseleave')\n  @HostListener('touchend')\n  focusEnd(): void {\n    this.isActive$.emit((this._isComponentActive = this._lastEmittedActive = false));\n  }\n\n  magIndex: number;\n\n  private setLetterFromCoordinates(x: number, y: number): void {\n    if (this.exactX) {\n      const rightX = this.alphabetContainer.nativeElement.getBoundingClientRect().right;\n      const leftX = this.alphabetContainer.nativeElement.getBoundingClientRect().left;\n\n      this._isComponentActive = x > leftX && x < rightX;\n      if (!this._isComponentActive) {\n        this.visualLetterIndex = this.visualLetterIndex = null;\n        return;\n      }\n    }\n\n    const height = this.alphabetContainer.nativeElement.clientHeight;\n    //Letters drew outside the viewport or host padding may cause values outsize height boundries (Usage of min/max)\n    const top = Math.min(Math.max(0, y - this.alphabetContainer.nativeElement.getBoundingClientRect().top), height);\n\n    let topRelative = (top / height) * (this.visibleLetters.length - 1);\n    const preferNext = Math.round(topRelative) < topRelative;\n    topRelative = Math.round(topRelative);\n\n    this.magIndex = topRelative;\n\n    //Set visualLetterIndex to the closest valid letter\n    this.visualLetterIndex = this.getClosestValidLetterIndex(this.visibleLetters, topRelative, preferNext);\n\n    if (this._lettersShortened) {\n      if (this.validLetters) {\n        this.letterSelected = this.validLetters[Math.round((top / height) * (this.validLetters.length - 1))];\n      } else {\n        this.letterSelected = this.alphabet[this.getClosestValidLetterIndex(this.alphabet, topRelative, preferNext)];\n      }\n    } else {\n      this.letterSelected = this.visibleLetters[this.visualLetterIndex];\n    }\n  }\n  visualLetterIndex: number;\n  letterSelected: string;\n\n  private getClosestValidLetterIndex(alphabet: string[], visualLetterIndex: number, preferNext: boolean): number {\n    const lowercaseAlphabet = alphabet.map((l) => l.toLowerCase());\n    const lowercaseValidLetters = this.validLetters.map((l) => l.toLowerCase());\n    const validLettersAsNumbers = lowercaseValidLetters.map((l) => lowercaseAlphabet.indexOf(l));\n\n    return validLettersAsNumbers.length > 0\n      ? validLettersAsNumbers.reduce((prev, curr) =>\n          preferNext\n            ? Math.abs(curr - visualLetterIndex) > Math.abs(prev - visualLetterIndex)\n              ? prev\n              : curr\n            : Math.abs(curr - visualLetterIndex) < Math.abs(prev - visualLetterIndex)\n            ? curr\n            : prev\n        )\n      : null;\n  }\n\n  private stringToNumber(value?: string): number {\n    return Number(value?.match(/[\\.\\d]+/)[0]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AlphabeticalScrollBarComponent } from './alphabetical-scroll-bar.component';\n\n\n\n@NgModule({\n  declarations: [AlphabeticalScrollBarComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [AlphabeticalScrollBarComponent]\n})\nexport class AlphabeticalScrollBarModule { }\n","/*\n * Public API Surface of alphabetical-scroll-bar\n */\n\nexport * from './lib/alphabetical-scroll-bar.service';\nexport * from './lib/alphabetical-scroll-bar.component';\nexport * from './lib/alphabetical-scroll-bar.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}